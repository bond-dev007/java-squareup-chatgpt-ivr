
name: CDK and SAM Deployment

on:
  push:
    branches: [ "main" ]


permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

env:
  # https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions#creating-secrets-for-a-repository
  # Create secrets in the repository and they will be pushed to Parameter store, these are required
  SQUARE_API_KEY: ${{ secrets.SQUARE_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  
    
  
  # https://docs.github.com/en/actions/learn-github-actions/variables#creating-configuration-variables-for-a-repository
  # Create repository variables to override any/all of the below from the defaults
  #
  CDK_STACK_NAME: ${{ vars.CDK_STACK_NAME || 'chimesdk-cdk-provision' }}
  STACK_NAME: ${{ vars.STACK_NAME || 'squareup-chatgpt-ivr' }}
  
  # The E164 Number to be used when transferring to main number
  TRANSFER_NUMBER: ${{ vars.TRANSFER_NUMBER || '+18004444444' }}
  
  # Set to PRODUCTION if you have a real Sqaure Buisness or Leave it as SANDBOX if you just have a dev account
  SQUARE_ENVIRONMENT: ${{ vars.SQUARE_ENVIRONMENT || 'SANDBOX' }}
  # You can have many locations in Square, need to set to the location you want to query inventory or employees against (required for functions to work)
  SQUARE_LOCATION_ID: ${{ vars.SQUARE_LOCATION_ID || 'LXXXXXXXXXXXX' }}
  
  # https://platform.openai.com/docs/models/overview (requres model with function calling)
  OPENAI_MODEL: ${{ vars.OPENAI_MODEL || 'gpt-3.5-turbo-1106' }}
  
  # Define in repo variable if you want want to route main number calls via SIP via the Voice Connector
  PBX_HOSTNAME:  ${{ vars.PBX_HOSTNAME || '' }}
  
  # Polly voices to use for English and Spanish
  VOICE_ID_EN: ${{ vars.VOICE_ID_EN  || 'Joanna' }}
  VOICE_ID_ES: ${{ vars.VOICE_ID_ES  || 'Lupe' }}

  # AWS Regions to deploy to https://docs.aws.amazon.com/chime-sdk/latest/dg/sdk-available-regions.html
  # In the US, us-east-1 and uswest-2 are the supported regions for Chime PSTN SDK
  # In EU for example you can use Frankfurt and London but they don't support PSTN numbers, but with SIP and BYOC you can implement in EU
  AWS_REGION_1: 'us-east-1'
  AWS_REGION_2: 'us-west-2'

jobs:
  # First we must create all the Chime resources like Voice Connectors, SIP Media Application, SIP Rules, etc.
  cdk-deploy:
    runs-on: ubuntu-latest

    steps:
    - name:  Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: maven
    
    - name: Set up Node we can install CDK
      uses: actions/setup-node@v4
      with:
        node-version: "18"
    
    - name: Install  CDK
      run: npm install -g aws-cdk
      
      
    - name: Setup AWS Creds using OIDC Role Method
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION_1 }}
        # https://github.com/aws-actions/configure-aws-credentials#oidc
        role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
    
    - name: Deploy Stack with CDK 
      working-directory: ./ChimeCDKProvision
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        # Deploy to both regions in parallel
        cdk deploy -c accountId=${ACCOUNT_ID} -c stackName=${CDK_STACK_NAME} -c regionEast=${AWS_REGION_1} -c regionWest=${AWS_REGION_2} --concurrency=2 --all --require-approval=never --ci=true
  
  # Now deploy the app into 2 regions at the same time via SAM with matrix job
  sam-deploy:
    strategy:
      matrix:
        region: [ ${{ env.AWS_REGION_1 }} , ${{ env.AWS_REGION_2 }} ]
    runs-on: ubuntu-latest
    needs: [cdk-deploy]
    
    steps:     
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: maven     
       
    - name: Build up all the libraries
      # Exclude modules that SAM builds so it can use SAM cache and speed deploys
      run: mvn -B install -DskipTests --projects '!ChimeSMA,!ChatGPT,!ChimeCDKProvision,!cloud.cleo.chimesma:generate-poly-prompt'

    - name: Setup AWS SAM
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    
    - name: Setup AWS Creds using OIDC Role Method
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ matrix.region }}
        # https://github.com/aws-actions/configure-aws-credentials#oidc
        role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
      
      # You can manually go set this in SSM Parameter Store or use GitHub Secrets
    - name: Push Square API Key to Parameter store if set in Repository Secrets
      if: ${{ env.SQUARE_API_KEY != '' }}
      run: >
        aws ssm put-parameter
        --name SQUARE_API_KEY
        --description "Square API Key used for stack ${STACK_NAME}"
        --type String
        --value ${{ secrets.SQUARE_API_KEY }}
        --overwrite
    
      # You can manually go set this in SSM Parameter Store or use GitHub Secrets
    - name: Push OpenAI API Key to Parameter store if set in Repository Secrets
      if: ${{ env.OPENAI_API_KEY != '' }}
      run: >
        aws ssm put-parameter
        --name OPENAI_API_KEY
        --description "OpenAI API Key used for stack ${STACK_NAME}"
        --type String
        --value ${{ secrets.OPENAI_API_KEY }}
        --overwrite
    
    - name: Cache SAM Build files
      uses: actions/cache@v3
      with:
        path: .aws-sam
        key: ${{ runner.os }}-sam
       
    - name: SAM Build
      run: sam build
      
    - name: SAM Deploy
      run:  >
        sam deploy --no-fail-on-empty-changeset --no-confirm-changeset --region ${{ matrix.region }}
        --stack-name ${STACK_NAME}
        --parameter-overrides
        SMAID=/${CDK_STACK_NAME}/SMA_ID
        VOICECONNECTORARN=/${CDK_STACK_NAME}/VC_ARN
        SQUAREENVIRONMENT=${SQUARE_ENVIRONMENT}
        SQUARELOCATIONID=${SQUARE_LOCATION_ID}
        TRANSFERNUMBER=${TRANSFER_NUMBER}
        OPENAIMODEL=${OPENAI_MODEL}
        VOICEIDEN=${VOICE_ID_EN}
        VOICEIDES=${VOICE_ID_ES}
    
    - name: Update SMA Endpoint if necessary
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        # The SMA ID is was pushed to param store by the CDK stack
        SMA_ID=$(aws ssm get-parameter --name /${CDK_STACK_NAME}/SMA_ID --query Parameter.Value --output text)
        # The CDK stack creates a simple SMA Lambda with SMA because it is required at creation time
        CUR_ENDPOINT=$(aws chime get-sip-media-application --sip-media-application-id ${SMA_ID} --query 'SipMediaApplication.Endpoints[0].LambdaArn' --output text)
        # The SMA should point to this lambda created by the SAM stack
        TARGET_ENDPOINT=arn:aws:lambda:${{ matrix.region }}:${ACCOUNT_ID}:function:${STACK_NAME}-ChimeSMA
        if [[ $TARGET_ENDPOINT != $CUR_ENDPOINT ]]; then
            echo "SMA Lambda Endpoint needs to be updated"
            aws chime update-sip-media-application --sip-media-application-id ${SMA_ID} --endpoints LambdaArn=${TARGET_ENDPOINT}
        else
            echo "SMA Lambda Endpoint is already corectly set"
        fi
        
            
      
